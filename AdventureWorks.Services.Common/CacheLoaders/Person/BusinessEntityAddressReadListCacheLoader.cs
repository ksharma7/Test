//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "Lookup Cache Loaders" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using Microsoft.Extensions.DependencyInjection;
using System;
using System.Collections.Generic;
using Xomega.Framework;
using Xomega.Framework.Lookup;
using Xomega.Framework.Services;

namespace AdventureWorks.Services
{
    public partial class BusinessEntityAddressReadListCacheLoader : LookupCacheLoader 
    {
        public BusinessEntityAddressReadListCacheLoader(IServiceProvider serviceProvider)
            : base(serviceProvider, LookupCache.Global, true, "business entity address")
        {
        }

        // !!! override this function, and call the base function with proper arguments !!!
        protected virtual Output<ICollection<BusinessEntityAddress_ReadListOutput>> ReadList(int _businessEntityId)
        {
            using (var s = serviceProvider.CreateScope())
            {
                var svc = s.ServiceProvider.GetService<IBusinessEntityAddressService>();
                return svc.ReadList(_businessEntityId);
            }
        }

        protected override void LoadCache(string tableType, CacheUpdater updateCache)
        {
            Dictionary<string, Dictionary<string, Header>> data = new Dictionary<string, Dictionary<string, Header>>();
            var output = ReadList(default(int));

            foreach (var row in output.Result)
            {
                string type = "business entity address";

                if (!data.TryGetValue(type, out Dictionary<string, Header> tbl))
                {
                    data[type] = tbl = new Dictionary<string, Header>();
                }
                string id = "" + row.AddressId;
                if (!tbl.TryGetValue(id, out Header h))
                {
                    tbl[id] = h = new Header(type, id, row.AddressType);
                }
                h.AddToAttribute("address line 1", row.AddressLine1);
                h.AddToAttribute("address line 2", row.AddressLine2);
                h.AddToAttribute("city", row.City);
                h.AddToAttribute("state", row.State);
                h.AddToAttribute("postal code", row.PostalCode);
                h.AddToAttribute("country", row.Country);
            }
            // if no data is returned we still need to update cache to get the notify listener removed
            if (data.Count == 0) updateCache(new LookupTable(tableType, new List<Header>(), true));
            foreach (string type in data.Keys)
                updateCache(new LookupTable(type, data[type].Values, true));
        }
    }
}