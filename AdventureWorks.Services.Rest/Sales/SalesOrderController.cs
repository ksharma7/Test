//---------------------------------------------------------------------------------------------
// This file was AUTO-GENERATED by "Web API Controllers" Xomega.Net generator.
//
// Manual CHANGES to this file WILL BE LOST when the code is regenerated.
//---------------------------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using Xomega.Framework;
using Xomega.Framework.Services;

namespace AdventureWorks.Services.Rest
{
    ///<summary>
    /// General sales order information.
    ///</summary>
    public partial class SalesOrderController : ControllerBase
    {
        private ErrorList currentErrors;
        private ErrorParser errorsParser;
        private ISalesOrderService svc;

        public SalesOrderController(ErrorList errorList, ErrorParser errorParser, ISalesOrderService service)
        {
            currentErrors = errorList;
            errorsParser = errorParser;
            svc = service;
        }

        ///<summary>
        /// Reads the values of a Sales Order object by its key.
        ///</summary>
        [Route("sales-order/{_salesOrderId}")]
        [HttpGet]
        public ActionResult Read([FromRoute] int _salesOrderId)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<SalesOrder_ReadOutput> output = svc.Read(_salesOrderId);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Creates a new Sales Order object using the specified data.
        ///</summary>
        [Route("sales-order")]
        [HttpPost]
        public ActionResult Create([FromBody] SalesOrder_CreateInput _data)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<SalesOrder_CreateOutput> output = svc.Create(_data);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Updates existing Sales Order object using the specified data.
        ///</summary>
        [Route("sales-order/{_salesOrderId}")]
        [HttpPut]
        public ActionResult Update([FromRoute] int _salesOrderId, [FromBody] SalesOrder_UpdateInput_Data _data)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<SalesOrder_UpdateOutput> output = svc.Update(_salesOrderId, _data);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Deletes the specified Sales Order object.
        ///</summary>
        [Route("sales-order/{_salesOrderId}")]
        [HttpDelete]
        public ActionResult Delete([FromRoute] int _salesOrderId)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output output = svc.Delete(_salesOrderId);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Reads a list of Sales Order objects based on the specified criteria.
        ///</summary>
        [Route("sales-order")]
        [HttpGet]
        public ActionResult ReadList([FromQuery] SalesOrder_ReadListInput_Criteria _criteria)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<ICollection<SalesOrder_ReadListOutput>> output = svc.ReadList(_criteria);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Reads the values of a Sales Order Detail object by its key.
        ///</summary>
        [Route("sales-order/detail/{_salesOrderDetailId}")]
        [HttpGet]
        public ActionResult Detail_Read([FromRoute] int _salesOrderDetailId)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<SalesOrderDetail_ReadOutput> output = svc.Detail_Read(_salesOrderDetailId);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Creates a new Sales Order Detail object using the specified data.
        ///</summary>
        [Route("sales-order/{_salesOrderId}/detail")]
        [HttpPost]
        public ActionResult Detail_Create([FromRoute] int _salesOrderId, [FromBody] SalesOrderDetail_CreateInput_Data _data)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<SalesOrderDetail_CreateOutput> output = svc.Detail_Create(_salesOrderId, _data);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Updates existing Sales Order Detail object using the specified data.
        ///</summary>
        [Route("sales-order/detail/{_salesOrderDetailId}")]
        [HttpPut]
        public ActionResult Detail_Update([FromRoute] int _salesOrderDetailId, [FromBody] SalesOrderDetail_UpdateInput_Data _data)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output output = svc.Detail_Update(_salesOrderDetailId, _data);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Deletes the specified Sales Order Detail object.
        ///</summary>
        [Route("sales-order/detail/{_salesOrderDetailId}")]
        [HttpDelete]
        public ActionResult Detail_Delete([FromRoute] int _salesOrderDetailId)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output output = svc.Detail_Delete(_salesOrderDetailId);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }

        ///<summary>
        /// Reads a list of Sales Order Detail objects based on the specified criteria.
        ///</summary>
        [Route("sales-order/{_salesOrderId}/detail")]
        [HttpGet]
        public ActionResult Detail_ReadList([FromRoute] int _salesOrderId)
        {
            ActionResult response = null;
            try
            {
                if (ModelState.IsValid)
                {
                    Output<ICollection<SalesOrderDetail_ReadListOutput>> output = svc.Detail_ReadList(_salesOrderId);
                    response = StatusCode((int)output.HttpStatus, output);
                    return response;
                }
                else
                {
                    ModelValidation.AddModelErrors(currentErrors, ModelState);
                }
            }
            catch (Exception ex)
            {
                currentErrors.MergeWith(errorsParser.FromException(ex));
            }
            response = StatusCode((int)currentErrors.HttpStatus, new Output(currentErrors));
            return response;
        }
    }
}